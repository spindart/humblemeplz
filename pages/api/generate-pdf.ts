import { NextApiRequest, NextApiResponse } from 'next';
import PDFDocument from 'pdfkit';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { tips } = req.body;

    // Create a new PDF document
    const doc = new PDFDocument({
      size: 'A4',
      margin: 50,
    });

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=resume-improvement-plan.pdf');

    // Pipe the PDF document to the response
    doc.pipe(res);

    // Add title
    doc
      .font('Helvetica-Bold')
      .fontSize(24)
      .text('Your Resume Improvement Plan', { align: 'center' })
      .moveDown(2);

    // Add current date
    doc
      .font('Helvetica')
      .fontSize(12)
      .text(`Generated on: ${new Date().toLocaleDateString()}`, { align: 'right' })
      .moveDown(2);

    // Add tips by category
    tips.forEach((category: any, index: number) => {
      // Add category title
      doc
        .font('Helvetica-Bold')
        .fontSize(18)
        .text(category.category)
        .moveDown(1);

      // Add tips
      doc.font('Helvetica').fontSize(12);
      category.tips.forEach((tip: string, tipIndex: number) => {
        doc
          .text(`${tipIndex + 1}. ${tip}`)
          .moveDown(0.5);
      });

      // Add space between categories
      if (index < tips.length - 1) {
        doc.moveDown(2);
      }
    });

    // Add footer
    doc
      .moveDown(4)
      .fontSize(10)
      .fillColor('#666666')
      .text('Generated by HumbleMePlz.com - Your Professional Resume Assistant', {
        align: 'center',
      });

    // Finalize the PDF
    doc.end();
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).json({ error: 'Error generating PDF' });
  }
} 